<?xml version="1.0" encoding="UTF-8"?>
<beans
		xmlns="http://www.springframework.org/schema/beans"
		xmlns:jaxws="http://cxf.apache.org/jaxws"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:task="http://www.springframework.org/schema/task"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd
		http://cxf.apache.org/jaxws
		http://cxf.apache.org/schemas/jaxws.xsd">

	<!--<context:component-scan base-package="com.kd.openplatform"></context:component-scan>-->
    <context:component-scan base-package="com.kd.openplatform">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

	<!--配置定时任务的线程池 -->
	<task:annotation-driven scheduler="myScheduler" mode="proxy" />
	<task:scheduler id="myScheduler" pool-size="10"/>

	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties,classpath:redis.properties,classpath:tokenName.properties,classpath:queryToken.properties,classpath:getToken.properties,classpath:ws.properties" ignore-unresolvable="true"/>

	<!-- 配置数据源1 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.openplatform}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="50" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="5" />

		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="${validationQuery.sql}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 开启Druid的监控统计功能 -->
		<property name="filters" value="config" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="3600" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- Oracle连接是获取字段注释 -->
		<!-- <property name="connectProperties">
			<props>
				<prop key="remarksReporting">true</prop>
			</props>
		</property> -->
		<property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${jdbc.publicKey}" />
	</bean>

	<!-- JDBC配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- redis 相关配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxTotal}"/>
		<property name="maxIdle" value="${redis.maxIdle}"/>
		<property name="minIdle" value="${redis.minIdle}"/>
		<property name="testOnBorrow" value="${redis.testOnBorrow}"/>
		<property name="testOnReturn" value="${redis.testOnReturn}"/>
		<property name="maxWaitMillis" value="${redis.timeout}" />
	</bean>

	<bean id="JedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		  p:host-name="${redis.host}" p:port="${redis.port}" p:pool-config-ref="jedisPoolConfig"/>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="JedisConnectionFactory" />
		<property name="keySerializer" >
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer" >
			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
		</property>
	</bean>
	<!--从配置文件中注入tokenName-->
	<bean id="constants" class="com.kd.openplatform.util.Constants">
		<property name="tokenName" value="${tokenName}"></property>
		<property name="accessUrl" value="${accessUrl}"></property>
		<property name="accessKey" value="${accessKey}"></property>
		<property name="accessUserName" value="${accessUserName}"></property>
		<property name="url95598" value="${for95598url}"></property>
		<property name="appCode95598" value="${for95598name}"></property>
		<property name="appSecret95598" value="${for95598p}"></property>
		<property name="tjAccount" value="${tjAccount}"></property>
		<property name="tjPasswd" value="${tjPasswd}"></property>
		<property name="tjTokenUrl" value="${tjTokenUrl}"></property>
		<property name="tjSsrc" value="${tjSsrc}"></property>
		<property name="tjSkey" value="${tjSkey}"></property>
	</bean>
	<!--配置项目启动运行获取accessToken的方法-->
	<bean id="deleteRedis" class="com.kd.openplatform.util.RedisUtil" init-method="deleteRedis"></bean>
	<!--<bean id="loadMQ" class="com.kd.openplatform.mq.MQ" init-method="receive"></bean>-->
	<bean id="loadReSource" class="com.kd.openplatform.quartzwork.InitServlet" init-method="init"></bean>
	<bean id="get95598Token" class="com.kd.openplatform.quartzwork.AutoGet95598Token" init-method="init"></bean>
	<!--<bean id="webservice" class="com.kd.service.OpWebservice" init-method="init"></bean>-->

	<!--cxf实现webservice配置 外网上线注释掉-->
	<bean id="OpWebservice" class="com.kd.service.OpWebserviceImpl"></bean>
	<jaxws:server address="/openplantformWS">
		<jaxws:serviceBean>
			<ref bean="OpWebservice" />
		</jaxws:serviceBean>
	</jaxws:server>

</beans>