<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task-3.0.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util-3.0.xsd"
	   default-autowire="byName" default-lazy-init="false">

	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:dbconfig.properties,classpath:redis.properties,classpath:tokenName.properties" />

	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<!--<property name="driverClassName" value="${jdbc.driverclass}"></property>-->
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.openplatform}"></property>
		<property name="filters" value="config" />
		<property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${jdbc.publickey}" />
	</bean>
	<!--      -->
	<bean id="sessionFactory"
		  class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<!--<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
				<!-- <prop key="hibernate.cache.use_query_cache">true</prop> -->
			</props>
		</property>
		<!-- 注解方式配置 -->
		<property name="packagesToScan">
			<list>
				<value>com.kd.openplatform.*.entity</value>
			</list>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>com.kd.openplatform.flow.entity.ApiFlowModeEntity</value>
				<value>com.kd.openplatform.flow.entity.ApiFlowModeRelaEntity</value>
				<value>com.kd.openplatform.charge.entity.ChargeAccountEntity</value>
				<value>com.kd.openplatform.charge.entity.ChargeTestAccountEntity</value>
				<value>com.kd.openplatform.alarm.entity.SysAlarmEntity</value>
			</list>
		</property>
	</bean>

	<!--&lt;!&ndash; JDBC配置 &ndash;&gt;-->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!--&lt;!&ndash; JDBC配置 &ndash;&gt;-->
	<bean id="namedParameterJdbcTemplate"
		  class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>

	<!--&lt;!&ndash; 配置事物管理器，在*ServiceImpl里写@Transactional就可以启用事物管理 &ndash;&gt;-->
	<bean name="transactionManager"
		  class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!--&lt;!&ndash; 配置事务通知属性 &ndash;&gt;-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--定义事务传播属性-->
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="new*" propagation="REQUIRED" />
            <tx:method name="set*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="change*" propagation="REQUIRED" />
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" />
            <tx:method name="load*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

	<!--&lt;!&ndash; redis连接池的配置 &ndash;&gt;-->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxTotal}"/>
		<property name="maxIdle" value="${redis.maxIdle}"/>
		<property name="minIdle" value="${redis.minIdle}"/>
		<property name="testOnBorrow" value="${redis.testOnBorrow}"/>
		<property name="testOnReturn" value="${redis.testOnReturn}"/>
	</bean>

	<!--&lt;!&ndash; redis的连接池pool，不是必选项：timeout/password  &ndash;&gt;-->
	<bean id = "jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig"/>
		<constructor-arg index="1" value="${redis.host}" type="java.lang.String"/>
		<constructor-arg index="2" value="${redis.port}" type="int"/>
		<constructor-arg index="3" value="${redis.timeout}" type="int"/>
		<!-- <constructor-arg index="4" value="${redis.password}" type="java.lang.String"/> -->
		<!-- <constructor-arg index="4" value="${redis.database}" type="int" /> -->
	</bean>
	<!--从配置文件中注入tokenName-->
	<bean class="com.kd.openplatform.common.utils.Constants" id="constants">
		<property name="TOKENNAME" value="${tokenName}"/>
 	</bean>


	<!--&lt;!&ndash; JSR303 Validator定义 &ndash;&gt;-->
	<!-- 
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
 -->


</beans>

